#!/usr/bin/env bash
##
# WP Docker bin scripts.
#
# @since 1.0.0
#
# @note PLEASE DO NOT EDIT THIS FILE!
# This file and the contents of it are updated automatically.
# - Instead of editing this file, please review source repository {@see https://o5p.me/LevQOD}.
##
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker [command] [args];
# ---------------------------------------------------------------------------------------------------------------------

# Suggested aliases for a `~/.profile` customization:
#  function d() { docker "${@}"; };
#  function dc() { docker compose "${@}"; };
#  function wpd() { ./.wp-docker "${@}"; };

# ---------------------------------------------------------------------------------------------------------------------
# Setup & validation.
# ---------------------------------------------------------------------------------------------------------------------

if ! cd "$(dirname "${BASH_SOURCE[0]}")"; then
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mFailed to CD into: ${BASH_SOURCE[0]}\e[0m\e[49m\e[39m";
	false; # Exit w/ error status.
fi;
if [[ -f ./.c10n-utilities ]]; then c10n_utilities_dir=.;
else c10n_utilities_dir=./vendor/clevercanyon/utilities; fi;
wp_docker="${c10n_utilities_dir}"/dev/cli-tools/docker/wp/docker;

if [[ ! -f "${c10n_utilities_dir}"/dev/utilities/load.bash ]]; then
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mMissing required dependency: '${c10n_utilities_dir}/dev/utilities/load.bash'\e[0m\e[49m\e[39m";
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mHave you run 'composer install' yet?\e[0m\e[49m\e[39m";
	false; # Exit w/ error status.
fi;
if [[ ! -x "${wp_docker}" ]]; then
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mMissing required executable dependency: '${wp_docker}'\e[0m\e[49m\e[39m";
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mHave you run 'composer install' yet?\e[0m\e[49m\e[39m";
	false; # Exit w/ error status.
fi;
if [[ ! -d ./vendor/bin || ! -d ./node_modules/.bin ]]; then
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mMissing required dependency: './vendor/bin | ./node_modules/.bin'\e[0m\e[49m\e[39m";
	echo -e "\e[38;5;255m\e[48;5;124m\e[1mHave you run 'composer install' yet?\e[0m\e[49m\e[39m";
	false; # Exit w/ error status.
fi;
. "${c10n_utilities_dir}"/dev/utilities/load.bash; # Loads utilities.
. "${c10n_utilities_dir}"/dev/utilities/bash/partials/loose-mode.bash;

# ---------------------------------------------------------------------------------------------------------------------
# Runs command in one of two ways; depending on requestion action.
# ---------------------------------------------------------------------------------------------------------------------

if is-wp-docker; then
	echo 'Not possible. This *is* WP Docker.';
	false; # Exit w/ error status.
fi;
if [[ "${1:-}" == 'shell' || "${1:-}" == 'psysh' || "${1:-}" == 'wp-cli' ]]; then
	CMD="$("${wp_docker}" "${@}" --prepare-cmd)";

	if [[ "${CMD:0:4}" == 'CMD:' ]]; then
		eval "${CMD:4}";
	else
		echo 'WP Docker failed to prepare a CMD.';
		echo 'Got: '"${CMD:4}"; false;
	fi;
else
	"${wp_docker}" "${@}";
fi;

# ---------------------------------------------------------------------------------------------------------------------
# Bringing up or taking down a project, network, and containers:
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker up;                                         Brings network, volumes, and services up.
# $ ./.wp-docker pause;                                      Pauses everything. Resume via `unpause`.
# $ ./.wp-docker unpause;                                    Unpauses. Brings network, volumes, services back up.
# $ ./.wp-docker down;                                       Brings everything down & permanently removes everything.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Review info & status of a project's containers:
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker info;                                       Shows all of a project's relevant details.
# $ ./.wp-docker status;                                     Shows all of a project's containers.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Logging into a container (shell access):
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker shell;                                      Main `php` container as default user `www-data`.
# $ ./.wp-docker shell [container-short-alias];              One of: `sql`, `mem`, `hog`, `php`, `pma`, `nxp`, `nxc`.
# $ ./.wp-docker shell --user root;                          Main `php` container w/ root access.
# $ ./.wp-docker shell --user root [container-short-alias];  A given container w/ root access.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Accessing Psysh in main `php` container (REPL already running vendor/autoload.php):
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker psysh;                                      Main `php` container as default user `www-data`.
# $ ./.wp-docker psysh --user root;                          Main `php` container w/ root access.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Accessing WordPress in main `php` container (WP shell access):
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker wp-cli;                                     Main `php` container as default user `www-data`.
# $ ./.wp-docker wp-cli --user root;                         Main `php` container w/ root access.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Executing array CMD inside of a container:
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker exec -c 'whoami';                            Main `php` container as default user `www-data`.
# $ ./.wp-docker exec --cmd-args 'whoami';                    Main `php` container as default user `www-data`.
# $ ./.wp-docker exec --user root --cmd-args '/etc/init.d/apache2 reload' [container-short-alias];
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Following a container's logs:
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker logs;                                       Main `php` container.
# $ ./.wp-docker logs [container-short-alias];               One of: `sql`, `mem`, `hog`, `php`, `pma`, `nxp`, `nxc`.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# Inspecting a container (raw JSON configuration access):
# ---------------------------------------------------------------------------------------------------------------------
# $ ./.wp-docker inspect;                                    Main `php` container.
# $ ./.wp-docker inspect [container-short-alias];            One of: `sql`, `mem`, `hog`, `php`, `pma`, `nxp`, `nxc`.
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# A few more examples showing use of docker directly:
# ---------------------------------------------------------------------------------------------------------------------
# $ docker compose ls;
# $ docker inspect  [project-slug]-network;
# $ docker logs     [project-slug]-[container-short-alias];
# $ docker inspect  [project-slug]-[container-short-alias];
# $ docker attach   [project-slug]-[container-short-alias];
# $ docker exec -it [project-slug]-[container-short-alias] bash --login;
# $ docker inspect --format '[format]' [project-slug]-[container-short-alias];
# ---------------------------------------------------------------------------------------------------------------------
